swagger: '2.0'
info:
  description: >-
    This API is a set of functions that provides consumer and supplier with all
    ecosystem services
  version: 1.0.3
  title: Internet of Things Analytical Ecosystem API
  contact: {}
host: 'localhost:5000'
basePath: /
tags:
  - name: Algorithms
    description: Everything about Algorithms
  - name: Billing
    description: Billing and settlements
  - name: Dataset
    description: Access to data
  - name: Admin
    description: Administration API
  - name: User
    description: User manipulation
  - name: Supplier API
    description: Supplier functions
  - name: Consumer API
    description: Consumer functions
  - name: Results
    description: All result oriented functions
schemes:
  - http
securityDefinitions:
  GoogleIdToken:
    description: >-
      [Google Identity Platform](https://developers.google.com/identity/)
      authentication with id_token as authentication key. The security
      definision in OpenAPI 2.0 lacks the 'Bearer ' string before <id_token> as
      described in [RFC 6750 section
      2.1](https://tools.ietf.org/html/rfc6750#section-2.1) Please insert
      'Bearer ' manualy. Remember to insert required header in your application
      requests 'Authentication &#58; Bearer <id_token>'
    type: apiKey
    in: header
    name: Authorization
paths:
  /bill/:
    get:
      tags:
        - Billing
        - Consumer API
        - Supplier API
      summary: Receive a billing report
      description: Receive billing report
      operationId: bill_rcv
      produces:
        - application/json
      security:
        - GoogleIdToken: []
      responses:
        '200':
          description: Billing Report
          schema:
            $ref: '#/definitions/BillingReport'
  '/bill/result/{resultsetId}':
    get:
      tags:
        - Billing
        - Consumer API
      summary: Receive a billing summary for result set
      description: Receive a billing summary for result set
      operationId: bill_result_id_rcv
      produces:
        - application/json
      security:
        - GoogleIdToken: []
      parameters:
        - name: resultsetId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Billing result set summary
          schema:
            $ref: '#/definitions/BillingReport'
  '/bill/algorithm/{algorithmId}':
    get:
      tags:
        - Billing
        - Supplier API
      summary: Receive a billing summary for result set
      description: Receive a billing summary for result set
      operationId: bill_algorithm_id_rcv
      produces:
        - application/json
      security:
        - GoogleIdToken: []
      parameters:
        - name: algorithmId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Billing algorithm summary
          schema:
            $ref: '#/definitions/BillingReport'
  /user/:
    get:
      tags:
        - User
        - Admin
        - Consumer API
        - Supplier API
      summary: Get user information
      description: Get user info - requres authorization
      operationId: get_user
      produces:
        - application/json
      security:
        - GoogleIdToken: []
      responses:
        '200':
          description: success
          schema:
            $ref: '#/definitions/User'
        '400':
          description: Invalid username
        '404':
          description: User not found
    delete:
      tags:
        - User
        - Admin
      summary: Delete user
      description: This can only be done by the Administrator.
      operationId: deleteUser
      produces:
        - application/json
      security:
        - GoogleIdToken: []
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    post:
      tags:
        - User
        - Admin
      summary: Create a new user
      description: This can only be done by admin.
      operationId: create_user
      produces:
        - application/json
      security:
        - GoogleIdToken: []
      responses:
        '200':
          description: OK
  /datasets:
    get:
      tags:
        - Consumer API
        - Dataset
      summary: Returns information about the stored Datasets
      description: >-
        The Datasets endpoint returns information about the stored Datasets. The
        response includes the display name and other details about each dataset.
        It also allows full-text search of tags.
      operationId: getDatasets
      consumes: []
      produces:
        - application/json
      security:
        - GoogleIdToken: []
      parameters:
        - name: tags
          in: query
          description: Comma separated Tags for search query.
          required: false
          type: string
          x-example: 'sum two items, sum multiple items'
      responses:
        '200':
          description: An array of datasets
          schema:
            type: array
            items:
              $ref: '#/definitions/Datasets'
        '401':
          description: No authentication. Need to login.
        '403':
          description: Not authorized to post new datasets
    post:
      tags:
        - Dataset
        - Consumer API
      summary: Add a Dataset
      description: Add a Dataset
      operationId: postDataset
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - GoogleIdToken: []
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/DatasetBody'
      responses:
        '200':
          description: OK - returns datasetID
          schema:
            $ref: '#/definitions/Datasets'
        '401':
          description: No authentication. Need to login.
        '403':
          description: Not authorized to post new datasets
  '/datasets/{datasetID}':
    get:
      tags:
        - Dataset
        - Consumer API
      summary: Returns a given dataset
      description: Returns a given dataset
      operationId: getDatasetsDataset
      consumes: []
      produces:
        - application/json
      security:
        - GoogleIdToken: []
      parameters:
        - name: datasetID
          in: path
          description: ID of a dattaset
          required: true
          type: string
      responses:
        '200':
          description: Data of the dataset
          schema:
            $ref: '#/definitions/Dataset'
        '401':
          description: No authentication. Need to login.
        '403':
          description: Not authorized to read that datasets
        '404':
          description: The given datasetID was not found in collection
    delete:
      tags:
        - Dataset
        - Consumer API
      summary: Deletes a given dataset
      description: Deletes a given dataset
      operationId: deleteDatasetsDataset
      consumes: []
      produces:
        - application/json
      security:
        - GoogleIdToken: []
      parameters:
        - name: datasetID
          in: path
          description: ID of a dattaset
          required: true
          type: string
      responses:
        '200':
          description: Deletion completed
        '401':
          description: No authentication. Need to login.
        '403':
          description: Not authorized to delete that dataset
        '404':
          description: The given datasetID was not found in collection
    put:
      tags:
        - Dataset
        - Consumer API
      summary: Add etities to dataset
      description: Add etities to dataset
      operationId: addDatasetsData
      consumes:
        - application/json
      produces: []
      security:
        - GoogleIdToken: []
      parameters:
        - name: datasetID
          in: path
          description: ID of a dataset
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/Dataset'
      responses:
        '200':
          description: OK
        '400':
          description: Malformed data
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No authentication. Need to login.
        '403':
          description: >-
            Not authorized to post data at all or not an owner of a given
            dataset
        '404':
          description: algorithmID not found
  /algorithms/:
    get:
      tags:
        - Consumer API
        - Algorithms
      summary: All available Algorithms descriptions.
      description: >-
        The Algorithms endpoint returns information about the available
        algorithms. The response includes the display name and other details
        about each algorithm. It also allows full-text search of tags.
      operationId: getAlgorithms
      consumes: []
      produces:
        - application/json
      parameters:
        - name: tags
          in: query
          description: >-
            Comma separated Tags for search query No whitespace characters
            allowed in searched tags. No wildcard or substring searches.
          required: false
          type: string
          x-example: 'algorithm1, algorithm2'
      responses:
        '200':
          description: An array of algorithms
          schema:
            type: array
            items:
              $ref: '#/definitions/Algorithms'
    post:
      tags:
        - Algorithms
        - Supplier API
      summary: Add a new Algorithm
      description: Add a new Algorithm
      operationId: postAlgorithms
      consumes:
        - application/json
      produces: []
      security:
        - GoogleIdToken: []
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/AlgorithmBody'
      responses:
        '200':
          description: OK
        '400':
          description: Malformed data
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No authentication. Need to login.
        '403':
          description: Not authorized to post new algorithms
        '409':
          description: AlgorithmID already exists.
          schema:
            $ref: '#/definitions/Error'
  '/algorithms/{algorithmID}':
    get:
      tags:
        - Algorithms
        - Consumer API
      summary: Detailed description of an Algorithm.
      description: >-
        The Algorithm Details endpoint returns detailed description of a given
        algorithm.
      operationId: getAlgorithmsAlgorithm
      consumes: []
      produces:
        - application/json
      parameters:
        - name: algorithmID
          in: path
          description: ID of an algorithm
          required: true
          type: string
      responses:
        '200':
          description: Details of the algorithm
          schema:
            $ref: '#/definitions/AlgorithmDetails'
        '404':
          description: The given algorithmID was not found in collection
    put:
      tags:
        - Algorithms
        - Supplier API
      summary: Update existing Algorithm
      description: Replace existing Algorithm
      operationId: updateAlgorithm
      consumes:
        - application/json
      produces: []
      security:
        - GoogleIdToken: []
      parameters:
        - name: algorithmID
          in: path
          description: ID of an algorithm
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/AlgorithmBody'
      responses:
        '200':
          description: OK
        '400':
          description: Malformed data
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: No authentication. Need to login.
        '403':
          description: >-
            Not authorized to replace algorithms at all or not an owner of a
            given algorithm
        '404':
          description: algorithmID not found
    delete:
      tags:
        - Algorithms
        - Supplier API
      summary: Delete an algorithm
      description: Delete an algorithm
      operationId: deleteAlgorithm
      consumes: []
      produces: []
      security:
        - GoogleIdToken: []
      parameters:
        - name: algorithmID
          in: path
          description: ID of an algorithm
          required: true
          type: string
      responses:
        '200':
          description: OK
        '401':
          description: No authentication. Need to login.
        '403':
          description: Not an owner of the algorithm
        '404':
          description: algorithmID not found
  '/algorithms/{algorithmID}/test':
    get:
      tags:
        - Algorithms
        - Supplier API
      summary: Tests syntax of the algorithm
      description: Tests syntax of the algorithm
      operationId: testAlgorithm
      consumes: []
      parameters:
        - name: algorithmID
          in: path
          description: ID of an algorithm
          required: true
          type: string
      responses:
        '200':
          description: Test OK
        '400':
          description: Test failed
        '404':
          description: The given algorithmID was not found in collection
  '/algorithms/{algorithmID}/{datasetID}':
    post:
      tags:
        - Algorithms
        - Consumer API
        - Dataset
      summary: >-
        Executes algorithm using specified dataset
      description: >-
        Executes algorithm using specified dataset
      operationId: postAlgorithmsAlgorithmIdDatasetId
      consumes: []
      produces:
        - application/json
      security:
        - GoogleIdToken: []
      parameters:
        - name: algorithmID
          in: path
          description: ID of an algorithm
          required: true
          type: string
        - name: datasetID
          in: path
          description: ID of a dataset
          required: true
          type: string
      responses:
        '200':
          description: Operation has been queued
        '404':
          description: Wrong datasetID or algorithmID
  '/results/{algorithmID}/{datasetID}':
    get:
      tags:
        - Results
        - Consumer API
      summary: >-
        Returns resultSet for specified algorithm+dataset combination
      description: >-
        Returns resultSet for specified algorithm+dataset combination
      operationId: getResult
      consumes: []
      produces:
        - application/json
      security:
        - GoogleIdToken: []
      parameters:
        - name: algorithmID
          in: path
          description: ID of an algorithm
          required: true
          type: string
        - name: datasetID
          in: path
          description: ID of a dataset
          required: true
          type: string
      responses:
        '200':
          description: Result
        '404':
          description: Result not found
    delete:
      tags:
        - Results
        - Consumer API
      summary: >-
        Deletes resultSet for specified algorithm+dataset combination
      description: >-
        Deletes resultSet for specified algorithm+dataset combination
      operationId: deleteResult
      consumes: []
      produces:
        - application/json
      security:
        - GoogleIdToken: []
      parameters:
        - name: algorithmID
          in: path
          description: ID of an algorithm
          required: true
          type: string
        - name: datasetID
          in: path
          description: ID of a dataset
          required: true
          type: string
      responses:
        '200':
          description: Result has been deleted
        '404':
          description: Result not found
      
    
  
definitions:
  AlgorithmBody:
    type: object
    required:
      - algorithmBLOB
    properties:
      algorithmBLOB:
        type: string
        description: 'The main algorithm program, definitions, data etc.'
      algorithmDescription:
        type: string
        description: detailed description of the algorithm.
      algorithmId:
        type: string
        description: Unique identifier representing a specific algorithm.
      algorithmSummary:
        type: string
        description: Brief summary of the algorithm.
      datasetDescription:
        type: string
        description: detailed description of that algorithm data set.
      displayName:
        type: string
        description: Display name of the algorithm.
      linkURL:
        type: string
        description: detailed url of the algorithm.
    description: All the data to needed to store an algorithm
  AlgorithmDetails:
    type: object
    properties:
      algorithmDescription:
        type: string
        description: detailed description of the algorithm.
      algorithmId:
        type: string
        description: Unique identifier representing a specific algorithm.
      algorithmSummary:
        type: string
        description: Brief summary of the algorithm.
      datasetDescription:
        type: string
        description: detailed description of that algorithm data set.
      displayName:
        type: string
        description: Display name of the algorithm.
      linkURL:
        type: string
        description: detailed url of the algorithm.
  Algorithms:
    type: object
    properties:
      algorithmId:
        type: string
        description: Unique identifier representing a specific algorithm.
      algorithmSummary:
        type: string
        description: Brief summary of the algorithm.
      displayName:
        type: string
        description: Display name of the algorithm.
      linkURL:
        type: string
        description: detailed url of the algorithm.
  Datasets:
    type: object
    properties:
      datasetId:
        type: string
        description: Unique identifier representing a specific dataset.
      datasetSummary:
        type: string
        description: Users description of a dataset
      displayName:
        type: string
        description: Display name of the dataset
      linkURL:
        type: string
        description: detailed url of the dataset.
  DatasetBody:
    type: object
    required:
      - datasetBLOB
    properties:
      datasetBLOB:
        type: string
        description: 'Dataset initial parameters or output values'
      datasetDescription:
        type: string
        description: detailed description of the dataset.
      datasetId:
        type: string
        description: Unique identifier representing a specific dataset.
      datasetSummary:
        type: string
        description: Brief summary of the dataset.
      displayName:
        type: string
        description: Display name of the dataset.
      linkURL:
        type: string
        description: detailed url of the dataset.
    description: All the data to needed to store a dataset
  Error:
    type: object
    properties:
      code:
        type: integer
        format: int32
      fields:
        type: string
      message:
        type: string
  ResultSet:
    type: object
    properties:
      resultSet:
        type: string
        description: Resultant set of data.
  Dataset:
    type: object
    properties:
      dataset:
        type: string
        description: Data entity to be added to dataset.
  DatasetID:
    type: object
    properties:
      datasetID:
        type: string
        description: Unique identifier representing a specific dataset.
  ResultSetID:
    type: object
    properties:
      resultsetID:
        type: string
        description: ID of a result dataset to be received from requested algorithm run.
  User:
    type: object
    properties:
      userID:
        type: string
        description: >-
          ID from sub field extracted from id_token as described in [Google
          Identity Platform](https://developers.google.com/identity/)
      firstName:
        type: string
      lastName:
        type: string
      email:
        type: string
      phone:
        type: string
      userStatus:
        type: integer
        format: int32
        description: User Status
  Period:
    type: object
    description: Time span of e report
    properties:
      begin:
        type: integer
        format: int64
        description: Date of the beginning of a report period
      end:
        type: integer
        format: int64
        description: Date of the end of a report period
  BillingReport:
    type: object
    description: Report containng billing information
    properties:
      reportData:
        type: string
        description: Complete data of the billing report
